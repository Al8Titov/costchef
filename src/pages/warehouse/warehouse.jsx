/**
 * @fileoverview –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
 * - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 * - –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * - –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * 
 * @author CostChef Team
 * @version 1.0.0
 */

import { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { Button, Input, Modal } from '../../components';
import { formatPrice, formatWeight, calculatePricePerUnit } from '../../utils/calculations';
import { filterBySearch, sortByField, generateId, formatDate } from '../../utils/dataUtils';
import { getUserProducts, createProduct, deleteProduct } from '../../bff/products-api';
import styled from 'styled-components';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫–ª–∞–¥–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * @param {string} className - CSS –∫–ª–∞—Å—Å
 * @returns {JSX.Element} –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–ª–∞–¥–∞
 */
const WarehouseContainer = ({ className }) => {
	const [products, setProducts] = useState([]);
	const [filteredProducts, setFilteredProducts] = useState([]);
	const [searchQuery, setSearchQuery] = useState('');
	const [sortOrder, setSortOrder] = useState('asc');
	const [isAddModalOpen, setIsAddModalOpen] = useState(false);
	const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);
	const [selectedProduct, setSelectedProduct] = useState(null);
	const [newProduct, setNewProduct] = useState({
		name: '',
		category_id: '',
		quantity: '',
		unit: 'kg',
		total_price: ''
	});
	const [errors, setErrors] = useState({});

	const currentUser = useSelector((state) => state.user);

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ db.json
	useEffect(() => {
		const loadProducts = async () => {
			if (!currentUser) return;
			
			try {
				const userProducts = await getUserProducts(currentUser.id);
				setProducts(userProducts);
				setFilteredProducts(userProducts);
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
			}
		};

		loadProducts();
	}, [currentUser]);

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
	useEffect(() => {
		let filtered = [...products];

		// –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
		if (searchQuery) {
			filtered = filterBySearch(filtered, searchQuery, 'name');
		}

		// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
		filtered = sortByField(filtered, 'name', sortOrder);

		setFilteredProducts(filtered);
	}, [products, searchQuery, sortOrder]);

	const categories = [
		{ id: 1, name: '–û–≤–æ—â–∏' },
		{ id: 2, name: '–ú—è—Å–æ' },
		{ id: 3, name: '–ü—Ç–∏—Ü–∞' },
		{ id: 4, name: '–†—ã–±–∞-–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã' },
		{ id: 5, name: '–ë–∞–∫–∞–ª–µ—è' },
		{ id: 6, name: '–ú–æ–ª–æ—á–∫–∞' },
		{ id: 7, name: '–§—Ä—É–∫—Ç—ã-—è–≥–æ–¥—ã' },
		{ id: 8, name: '–ù–∞–ø–∏—Ç–∫–∏' },
		{ id: 9, name: '–ó–µ–ª–µ–Ω—å' },
		{ id: 10, name: '–°–ø–µ—Ü–∏–∏' }
	];

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
	 * @param {Event} e - –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	 */
	const handleInputChange = (e) => {
		const { name, value } = e.target;
		setNewProduct(prev => ({
			...prev,
			[name]: value
		}));
		
		// –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
		if (errors[name]) {
			setErrors(prev => ({
				...prev,
				[name]: ''
			}));
		}
	};

	/**
	 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
	 * @returns {boolean} –í–∞–ª–∏–¥–Ω–∞ –ª–∏ —Ñ–æ—Ä–º–∞
	 */
	const validateForm = () => {
		const newErrors = {};

		if (!newProduct.name.trim()) {
			newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
		}

		if (!newProduct.category_id) {
			newErrors.category_id = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
		}

		if (!newProduct.quantity || parseFloat(newProduct.quantity) <= 0) {
			newErrors.quantity = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ';
		}

		if (!newProduct.total_price || parseFloat(newProduct.total_price) <= 0) {
			newErrors.total_price = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å';
		}

		setErrors(newErrors);
		return Object.keys(newErrors).length === 0;
	};

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
	 * @param {Event} e - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
	 */
	const handleAddProduct = async (e) => {
		e.preventDefault();
		
		if (!validateForm()) {
			return;
		}

		const category = categories.find(c => c.id === parseInt(newProduct.category_id));
		const pricePerUnit = calculatePricePerUnit(
			parseFloat(newProduct.total_price),
			parseFloat(newProduct.quantity),
			newProduct.unit
		);

		const product = {
			id: generateId(),
			name: newProduct.name,
			category_id: parseInt(newProduct.category_id),
			category_name: category.name,
			quantity: parseFloat(newProduct.quantity),
			unit: newProduct.unit,
			total_price: parseFloat(newProduct.total_price),
			price_per_unit: pricePerUnit,
			user_id: currentUser.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			created_at: new Date().toISOString(),
			updated_at: new Date().toISOString()
		};

		try {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ db.json —á–µ—Ä–µ–∑ API
			const createdProduct = await createProduct(product);
			setProducts(prev => [createdProduct, ...prev]);
			setFilteredProducts(prev => [createdProduct, ...prev]);
			
			setNewProduct({
				name: '',
				category_id: '',
				quantity: '',
				unit: 'kg',
				total_price: ''
			});
			setIsAddModalOpen(false);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
		}
	};

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
	 * @param {number} productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞
	 */
	const handleDeleteProduct = async (productId) => {
		if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?')) {
			try {
				const success = await deleteProduct(productId);
				if (success) {
					const updatedProducts = products.filter(product => product.id !== productId);
					setProducts(updatedProducts);
					setFilteredProducts(updatedProducts);
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
				alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
			}
		}
	};

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
	 * @param {Object} product - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
	 */
	const handleShowHistory = (product) => {
		setSelectedProduct(product);
		setIsHistoryModalOpen(true);
	};

	return (
		<div className={className}>
			<PageHeader>
				<PageTitle>–°–∫–ª–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</PageTitle>
				<Button onClick={() => setIsAddModalOpen(true)} size="large">
					–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
				</Button>
			</PageHeader>

			<FiltersSection>
				<SearchInput
					type="text"
					placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞..."
					value={searchQuery}
					onChange={(e) => setSearchQuery(e.target.value)}
				/>
				<SortButton
					onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
				>
					–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ê-–Ø {sortOrder === 'asc' ? '‚Üë' : '‚Üì'}
				</SortButton>
			</FiltersSection>

			<TableContainer>
				<Table>
					<TableHeader>
						<TableRow>
							<TableHeaderCell>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</TableHeaderCell>
							<TableHeaderCell>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableHeaderCell>
							<TableHeaderCell>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</TableHeaderCell>
							<TableHeaderCell>–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥/–ª/—à—Ç</TableHeaderCell>
							<TableHeaderCell>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</TableHeaderCell>
							<TableHeaderCell>–î–µ–π—Å—Ç–≤–∏—è</TableHeaderCell>
						</TableRow>
					</TableHeader>
					<TableBody>
						{filteredProducts.map(product => (
							<TableRow key={product.id}>
								<TableCell>{product.name}</TableCell>
								<TableCell>{product.category_name}</TableCell>
								<TableCell>
									{formatWeight(product.quantity, product.unit)}
								</TableCell>
								<TableCell>
									{formatPrice(product.price_per_unit)} ‚ÇΩ
								</TableCell>
								<TableCell>
									{formatPrice(product.total_price)} ‚ÇΩ
								</TableCell>
								<TableCell>
									<ActionButtons>
										<Button 
											size="small" 
											variant="secondary"
											onClick={() => handleShowHistory(product)}
										>
											–ò—Å—Ç–æ—Ä–∏—è
										</Button>
										<Button 
											size="small" 
											variant="secondary"
											onClick={() => handleDeleteProduct(product.id)}
										>
											–£–¥–∞–ª–∏—Ç—å
										</Button>
									</ActionButtons>
								</TableCell>
							</TableRow>
						))}
					</TableBody>
				</Table>
			</TableContainer>

			{filteredProducts.length === 0 && (
				<EmptyState>
					<EmptyIcon>üì¶</EmptyIcon>
					<EmptyTitle>–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</EmptyTitle>
					<EmptyDescription>
						{searchQuery 
							? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
							: '–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ —Å–∫–ª–∞–¥'
						}
					</EmptyDescription>
				</EmptyState>
			)}

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ */}
			<Modal
				isOpen={isAddModalOpen}
				onClose={() => setIsAddModalOpen(false)}
				title="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
			>
				<AddProductForm onSubmit={handleAddProduct}>
					<FormGroup>
						<Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ *</Label>
						<Input
							id="name"
							name="name"
							value={newProduct.name}
							onChange={handleInputChange}
							placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
						/>
						{errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}
					</FormGroup>

					<FormGroup>
						<Label htmlFor="category_id">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</Label>
						<Select
							id="category_id"
							name="category_id"
							value={newProduct.category_id}
							onChange={handleInputChange}
						>
							<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
							{categories.map(category => (
								<option key={category.id} value={category.id}>
									{category.name}
								</option>
							))}
						</Select>
						{errors.category_id && <ErrorMessage>{errors.category_id}</ErrorMessage>}
					</FormGroup>

					<FormRow>
						<FormGroup>
							<Label htmlFor="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *</Label>
							<Input
								id="quantity"
								name="quantity"
								type="number"
								step="0.001"
								value={newProduct.quantity}
								onChange={handleInputChange}
								placeholder="0.000"
							/>
							{errors.quantity && <ErrorMessage>{errors.quantity}</ErrorMessage>}
						</FormGroup>

						<FormGroup>
							<Label htmlFor="unit">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</Label>
							<Select
								id="unit"
								name="unit"
								value={newProduct.unit}
								onChange={handleInputChange}
							>
								<option value="kg">–∫–≥</option>
								<option value="l">–ª</option>
								<option value="—à—Ç">—à—Ç</option>
							</Select>
						</FormGroup>
					</FormRow>

					<FormGroup>
						<Label htmlFor="total_price">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å *</Label>
						<Input
							id="total_price"
							name="total_price"
							type="number"
							step="0.01"
							value={newProduct.total_price}
							onChange={handleInputChange}
							placeholder="0.00"
						/>
						{errors.total_price && <ErrorMessage>{errors.total_price}</ErrorMessage>}
					</FormGroup>

					<FormActions>
						<Button 
							type="button" 
							variant="secondary"
							onClick={() => setIsAddModalOpen(false)}
						>
							–û—Ç–º–µ–Ω–∞
						</Button>
						<Button type="submit">
							–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
						</Button>
					</FormActions>
				</AddProductForm>
			</Modal>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
			<Modal
				isOpen={isHistoryModalOpen}
				onClose={() => setIsHistoryModalOpen(false)}
				title={`–ò—Å—Ç–æ—Ä–∏—è: ${selectedProduct?.name}`}
			>
				<HistoryContent>
					<HistoryPlaceholder>
						üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
					</HistoryPlaceholder>
					<HistoryInfo>
						<InfoItem>
							<InfoLabel>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</InfoLabel>
							<InfoValue>
								{selectedProduct && formatWeight(selectedProduct.quantity, selectedProduct.unit)}
							</InfoValue>
						</InfoItem>
						<InfoItem>
							<InfoLabel>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</InfoLabel>
							<InfoValue>
								{selectedProduct && formatPrice(selectedProduct.price_per_unit)} ‚ÇΩ
							</InfoValue>
						</InfoItem>
						<InfoItem>
							<InfoLabel>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</InfoLabel>
							<InfoValue>
								{selectedProduct && formatDate(selectedProduct.updated_at)}
							</InfoValue>
						</InfoItem>
					</HistoryInfo>
				</HistoryContent>
			</Modal>
		</div>
	);
};

const PageHeader = styled.div`
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 30px;
`;

const PageTitle = styled.h1`
	font-size: 32px;
	font-weight: 600;
	color: #2c3e50;
	margin: 0;
`;

const FiltersSection = styled.div`
	display: flex;
	gap: 20px;
	margin-bottom: 30px;
	align-items: center;
`;

const SearchInput = styled.input`
	padding: 10px 15px;
	border: 2px solid #e0e0e0;
	border-radius: 8px;
	font-size: 16px;
	flex: 1;
	min-width: 300px;
	
	&:focus {
		outline: none;
		border-color: #5685bc;
	}
`;

const SortButton = styled(Button)`
	min-width: 150px;
`;

const TableContainer = styled.div`
	background: white;
	border-radius: 15px;
	overflow: hidden;
	box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
	margin-bottom: 40px;
`;

const Table = styled.table`
	width: 100%;
	border-collapse: collapse;
`;

const TableHeader = styled.thead`
	background: #f8f9fa;
`;

const TableRow = styled.tr`
	&:nth-child(even) {
		background: #f8f9fa;
	}
	
	&:hover {
		background: #e9ecef;
	}
`;

const TableHeaderCell = styled.th`
	padding: 15px;
	text-align: left;
	font-weight: 600;
	color: #2c3e50;
	border-bottom: 2px solid #e0e0e0;
`;

const TableBody = styled.tbody``;

const TableCell = styled.td`
	padding: 15px;
	border-bottom: 1px solid #e0e0e0;
	color: #2c3e50;
`;

const ActionButtons = styled.div`
	display: flex;
	gap: 10px;
`;

const EmptyState = styled.div`
	text-align: center;
	padding: 60px 20px;
`;

const EmptyIcon = styled.div`
	font-size: 64px;
	margin-bottom: 20px;
`;

const EmptyTitle = styled.h3`
	font-size: 24px;
	color: #2c3e50;
	margin: 0 0 10px 0;
`;

const EmptyDescription = styled.p`
	font-size: 16px;
	color: #7f8c8d;
	margin: 0;
`;

const AddProductForm = styled.form`
	display: flex;
	flex-direction: column;
	gap: 20px;
`;

const FormGroup = styled.div`
	display: flex;
	flex-direction: column;
`;

const FormRow = styled.div`
	display: flex;
	gap: 20px;
`;

const Label = styled.label`
	font-weight: 500;
	color: #2c3e50;
	margin-bottom: 8px;
`;

const Select = styled.select`
	padding: 10px 15px;
	border: 2px solid #e0e0e0;
	border-radius: 8px;
	font-size: 16px;
	background: white;
	
	&:focus {
		outline: none;
		border-color: #5685bc;
	}
`;

const FormActions = styled.div`
	display: flex;
	gap: 20px;
	justify-content: flex-end;
	margin-top: 20px;
`;

const ErrorMessage = styled.div`
	color: #e74c3c;
	font-size: 14px;
	margin-top: 5px;
`;

const HistoryContent = styled.div`
	padding: 20px;
`;

const HistoryPlaceholder = styled.div`
	text-align: center;
	font-size: 18px;
	color: #7f8c8d;
	margin-bottom: 30px;
	padding: 40px;
	background: #f8f9fa;
	border-radius: 8px;
`;

const HistoryInfo = styled.div`
	display: flex;
	flex-direction: column;
	gap: 15px;
`;

const InfoItem = styled.div`
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 10px 0;
	border-bottom: 1px solid #e0e0e0;
`;

const InfoLabel = styled.span`
	font-weight: 500;
	color: #2c3e50;
`;

const InfoValue = styled.span`
	color: #7f8c8d;
`;

export const Warehouse = styled(WarehouseContainer)`
	padding: 20px;
	max-width: 1200px;
	margin: 0 auto;
`;
